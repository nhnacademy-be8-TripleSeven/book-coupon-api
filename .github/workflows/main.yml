# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI/CD Pipeline for Spring Boot BookCoupon Api
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven



      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

      - name: Build Docker image
        run: |
          docker build -t lushlife99/nhn-book-coupon:${{ github.sha }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Remove unused Docker images
        run: |
          docker image prune -a --filter "until=72h

      - name: Push Docker image
        run: |
          docker push lushlife99/nhn-book-coupon:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to First Instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -e
            docker pull lushlife99/nhn-book-coupon:${{ github.sha }}
            if [ "$(docker ps -aq --filter "name=book-coupon-api-instance-1")" ]; then
              docker stop book-coupon-api-instance-1 || true
              docker rm -f book-coupon-api-instance-1 || true
            fi
            docker run --name book-coupon-api-instance-1 --network nhn-book-store-network -p 8086:8086 -e SPRING_PROFILES_ACTIVE=instance1 -d lushlife99/nhn-book-coupon:${{ github.sha }}
            docker logs -f book-coupon-api-instance-1

      - name: Check First Instance via Eureka
        run: |
          START_TIME=$(date +%s)
          while : ; do
            RESPONSE=$(curl -s -H "Accept: application/xml" http://${{ secrets.EUREKA_USERNAME }}:${{ secrets.EUREKA_PASSWORD }}@nhn24.store/eureka/eureka/instances/book-coupon-api-instance-1)
            if [ -z "$RESPONSE" ]; then
              echo "Error: Empty response from Eureka server."
              exit 1
            fi
            STATUS=$(echo "$RESPONSE" | xmllint --xpath "string(//status)" - 2>/dev/null)
            if [ "$STATUS" == "UP" ]; then
              echo "First instance is healthy and UP."
              break
            fi
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            if [ $ELAPSED_TIME -ge 180 ]; then
              echo "First instance is not healthy within 3 minutes. Aborting deployment."
              exit 1
            fi
            sleep 10
          done
